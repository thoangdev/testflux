version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: testflux-db
    environment:
      POSTGRES_USER: testflux
      POSTGRES_PASSWORD: testflux_dev
      POSTGRES_DB: testflux
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testflux"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - testflux-network
    restart: unless-stopped

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: testflux-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - testflux-network
    restart: unless-stopped
    profiles:
      - cache

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: base
    container_name: testflux-backend
    ports:
      - "3001:3001"
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://testflux:testflux_dev@db:5432/testflux
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-change-in-production
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=debug
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    command: npm run dev
    networks:
      - testflux-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
    container_name: testflux-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - backend
    networks:
      - testflux-network
    restart: unless-stopped

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: testflux-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@testflux.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - testflux-network
    restart: unless-stopped
    profiles:
      - tools

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: testflux-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx-dev.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - testflux-network
    restart: unless-stopped
    profiles:
      - proxy

  # Test database for integration tests
  test-db:
    image: postgres:15-alpine
    container_name: testflux-test-db
    environment:
      POSTGRES_USER: testflux_test
      POSTGRES_PASSWORD: testflux_test
      POSTGRES_DB: testflux_test
    ports:
      - "5433:5432"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testflux_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - testflux-network
    profiles:
      - test

  # MailHog for email testing (development)
  mailhog:
    image: mailhog/mailhog
    container_name: testflux-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - testflux-network
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  testflux-network:
    driver: bridge
    name: testflux-network
